apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

File buildDir = file(".");
Properties props = new Properties()
File propsFile = new File( buildDir, "src/main/resources/com/neuronrobotics/nrjavaserial/build.properties")
props.load(new FileInputStream( propsFile))
project.logger.info("build.properties:\n    " + props)
File userPropsFile = new File(buildDir, "user.build.properties")
if ( userPropsFile.exists() ) {
	Properties userProps = new Properties(props);
	userProps.load(new FileInputStream(userPropsFile));
	
	for ( Object key : props.keySet() )	{
		String value = props.getProperty( (String) key);
		userProps.setProperty( (String) key, value);
	}
	
	props = userProps;
	project.logger.info("overloaded properties by user.build.properties:\n    " + props);
}

group = "com.neuronrobotics"
archivesBaseName = "nrjavaserial"
version = props."app.version"

sourceSets {
	test {
		java {
			srcDirs = ["test/java/src","examples/java/src" ]
		}
	}
	main {
		resources {
			srcDirs = ["src/main/resources", "src/main/c/resources"]
			includes = ["**/*.so","**/*.dll", "**/*.jnilib","**/*.properties"]
		}
	}
}

if ( "true".equals( props.getProperty("jar.noversion") ) ) {
    jar.archiveName = "nrjavaserial.jar"
}
else {
    jar.archiveName = "nrjavaserial-${props.'app.version'}.jar"
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
	gradleVersion = '2.7'
}

repositories {
	mavenCentral()
	maven {
        url "https://jcenter.bintray.com"
    }
}

dependencies {
	compile fileTree(dir: 'libs', includes: ['*.jar'])
	testCompile 'junit:junit:4.12'
	compile 'org.apache.commons:commons-lang3:3.2.1'
	compile 'commons-net:commons-net:3.3'
}

jar {
	
	jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	/* Package up all runtime files (our classes and those of dependencies) into
	 * our JAR. This gets us a sort of poor man's shaded JAR/"fat JAR". */
	from (configurations.runtime.files.collect { zipTree(it) }) {
		/* We don't want the metadata from any shaded JARs in our output. */
		exclude 'META-INF/'
	}

	manifest {
		attributes(
			"Created-By": "Neuron Robotics Cooperative",
			"Specification-Title": props."app.name",
			"Specification-Version": props."app.version",
			"Specification-Vendor": "Neuron Robotics Cooperative",
			"Implementation-Title": props."app.name",
			"Implementation-Version" : props."app.version",
			"Implementation-Vendor": "Neuron Robotics Cooperative",
		)
		instruction 'Import-Package', '!org.apache.commons.*'
	}
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from (sourceSets.main.allSource) {
		exclude 'native/'
	}
}

signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives jar
}

//import org.gradle.plugins.signing.Sign
//
//gradle.taskGraph.whenReady { taskGraph ->
//	if (taskGraph.allTasks.any { it instanceof Sign }) {
//		// Use Java 6's console to read from the console (no good for
//		// a CI environment)
//		Console console = System.console()
//		console.printf "\n\nWe have to sign some things in this build." +
//					   "\n\nPlease enter your signing details.\n\n"
//
//		def id = console.readLine("PGP Key Id: ")
//		def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
//		def password = console.readPassword("PGP Private Key Password: ")
//
//		allprojects { ext."signing.keyId" = id }
//		allprojects { ext."signing.secretKeyRingFile" = file }
//		allprojects { ext."signing.password" = password }
//
//		console.printf "\nThanks.\n\n"
//	}
//}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'NRJavaSerial'
				packaging 'jar'
				description 'A fork of the RXTX library with a focus on ease of use and embeddability in other libraries.'
				url 'http://neuronrobotics.com'

				scm {
					connection			'scm:git:https://github.com/NeuronRobotics/nrjavaserial.git'
					developerConnection	'scm:git:git@github.com:NeuronRobotics/nrjavaserial.git'
					url					'https://github.com/NeuronRobotics/nrjavaserial'
				}

				licenses {
					license {
						name	'The Apache License, Version 2.0'
						url		'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id		'madhephaestus'
						name	'Kevin Harrington'
						email	'kharrington@neuronrobotics.com'
					}
				}
			}
		}
	}
}
