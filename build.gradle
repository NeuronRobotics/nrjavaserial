plugins {
	id "biz.aQute.bnd.builder" version "5.0.1"
	id "com.diffplug.spotless" version "5.9.0"
	id 'eclipse'
	id 'java'
	id 'maven-publish'
	id 'signing'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

File buildDir = file(".");
Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath() + "/src/main/resources/com/neuronrobotics/nrjavaserial/build.properties"))

group = "com.neuronrobotics"
archivesBaseName = "nrjavaserial"
version = props."app.version"

sourceSets {
	test {
		java {
			srcDirs = ["test/src"]
		}
	}
	main {
		resources {
			srcDirs = ["src/main/resources", "src/main/c/resources"]
			includes = ["**/*.so","**/*.dll", "**/*.jnilib","**/*.properties"]
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'junit:junit:4.12'
	implementation 'commons-net:commons-net:3.9.0'
	compileOnly 'net.java.dev.jna:jna:4.4.0'
	compileOnly 'net.java.dev.jna:jna-platform:4.4.0'
}

java {
	withJavadocJar()
	withSourcesJar()
}

jar {
	bnd("Created-By": "Commonwealth Robotics Cooperative",
		"Specification-Title": props."app.name",
		"Specification-Version": props."app.version",
		"Specification-Vendor": "Commonwealth Robotics Cooperative",
		"Implementation-Title": props."app.name",
		"Implementation-Version" : props."app.version",
		"Implementation-Vendor": "Commonwealth Robotics Cooperative",
		"Import-Package": "com.sun.jna.platform.win32;resolution:=optional,org.apache.commons.net.telnet;resolution:=optional,!gnu.io*,*",
		"Export-Package": "gnu.io*"
	)
}

// withSourcesJar() creates the sourcesJar task which, by default, packages
// sourceSets.main.allSource. Including native libraries in this source set is
// the easiest way to include them the final library archive, but we don't want
// an extra half meg of binaries to be included in the source archive.
sourcesJar.exclude('native/')

spotless {
	enforceCheck false
	ratchetFrom 'origin/master'

	format 'misc', {
		target '*.gradle'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}

	java {
		importOrder()
		removeUnusedImports()
		eclipse()
	}
}
/*
signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

//import org.gradle.plugins.signing.Sign
//
//gradle.taskGraph.whenReady { taskGraph ->
//	if (taskGraph.allTasks.any { it instanceof Sign }) {
//		// Use Java 6's console to read from the console (no good for
//		// a CI environment)
//		Console console = System.console()
//		console.printf "\n\nWe have to sign some things in this build." +
//					   "\n\nPlease enter your signing details.\n\n"
//
//		def id = console.readLine("PGP Key Id: ")
//		def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
//		def password = console.readPassword("PGP Private Key Password: ")
//
//		allprojects { ext."signing.keyId" = id }
//		allprojects { ext."signing.secretKeyRingFile" = file }
//		allprojects { ext."signing.password" = password }
//
//		console.printf "\nThanks.\n\n"
//	}
//}
*/
// You can provide OSSRH publication credentials in three ways. Either:
//
// 1. Pass the username and password properties on the command line:
//
//     ./gradlew ... -PossrhUsername=username -PossrhPassword=password
//
// 2. Configure those properties in ~/.gradle/gradle.properties.
// 3. Set the OSSRHUSERNAME and OSSRHPASSWORD environment variables to the
//    username and password, respectively.
publishing {
	def ossrhUsername = findProperty('ossrhUsername')
	def ossrhPassword = findProperty('ossrhPassword')

	if (System.env.OSSRHUSERNAME && System.env.OSSRHPASSWORD) {
		ossrhUsername = System.env.OSSRHUSERNAME
		ossrhPassword = System.env.OSSRHPASSWORD
	}

	repositories {
		// A Nexus Repository instance running on localhost. Useful for
		// debugging the publishing process. Named “localhost”, not “local”, to
		// avoid confusion with the publishToMavenLocal task, which publishes
		// to the local Maven cache at ~/.m2/repository.
		maven {
			name = 'localhost'
			url = 'http://localhost:8081/repository/maven-releases/'
			allowInsecureProtocol = true
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}

		maven {
			name = 'ossrh'
			url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}

		maven {
			name = 'ossrhSnapshots'
			url = 'https://oss.sonatype.org/content/repositories/snapshots/'
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}
	}

	publications {
		nrJavaSerial(MavenPublication) {
			pom {
				// By default, the artifact ID is derived from the name of the
				// directory housing this file. If we don't specifically
				// override that, we'll end up with an unexpected artifact ID
				// if the project directory is called something other than
				// “nrjavaserial”.
				artifactId = props.'app.name'
				name = 'NRJavaSerial'
				description = 'A fork of the RXTX library with a focus on ease of use and embeddability in other libraries.'
				url = 'https://nrjs.org'

				from components.java

				scm {
					connection = 'scm:git:https://github.com/NeuronRobotics/nrjavaserial.git'
					developerConnection = 'scm:git:git@github.com:NeuronRobotics/nrjavaserial.git'
					url = 'https://github.com/NeuronRobotics/nrjavaserial'
				}

				licenses {
					license {
						name = 'RXTX License v 2.1 - LGPL v 2.1 + Linking Over Controlled Interface'
						url = 'https://raw.githubusercontent.com/NeuronRobotics/nrjavaserial/master/LICENSE'
					}
				}

				developers {
					developer {
						id = 'madhephaestus'
						name = 'Kevin Harrington'
						email = 'kharrington@neuronrobotics.com'
					}
				}
			}
		}
	}
}
