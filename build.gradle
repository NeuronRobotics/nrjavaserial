plugins {
	id "biz.aQute.bnd.builder" version "5.0.1"
	id "com.diffplug.spotless" version "5.9.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

File buildDir = file(".");
Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath() + "/src/main/resources/com/neuronrobotics/nrjavaserial/build.properties"))

group = "com.neuronrobotics"
archivesBaseName = "nrjavaserial"
version = props."app.version"

sourceSets {
	test {
		java {
			srcDirs = ["test/src"]
		}
	}
	main {
		resources {
			srcDirs = ["src/main/resources", "src/main/c/resources"]
			includes = ["**/*.so","**/*.dll", "**/*.jnilib","**/*.properties"]
		}
	}
}

jar.archiveName = "nrjavaserial-${props.'app.version'}.jar"

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile fileTree(dir: 'libs', includes: ['*.jar'])
	testCompile 'junit:junit:4.12'
	testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
	compile 'org.slf4j:slf4j-api:1.7.30'
	compile 'commons-net:commons-net:3.7.2'
	compileOnly 'net.java.dev.jna:jna:4.4.0'
	compileOnly 'net.java.dev.jna:jna-platform:4.4.0'
}

jar {
	jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	bnd("Created-By": "Commonwealth Robotics Cooperative",
		"Specification-Title": props."app.name",
		"Specification-Version": props."app.version",
		"Specification-Vendor": "Commonwealth Robotics Cooperative",
		"Implementation-Title": props."app.name",
		"Implementation-Version" : props."app.version",
		"Implementation-Vendor": "Commonwealth Robotics Cooperative",
		"Import-Package": "com.sun.jna.platform.win32;resolution:=optional,org.apache.commons.net.telnet;resolution:=optional,!gnu.io*,*",
		"Export-Package": "gnu.io*"
	)

}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from (sourceSets.main.allSource) {
		exclude 'native/'
	}
}

spotless {
	ratchetFrom 'origin/master'

	format 'misc', {
		target '*.gradle'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}

	java {
		importOrder()
		removeUnusedImports()
		endWithNewline()
		eclipse()
	}
}
/*
signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives jar
}

//import org.gradle.plugins.signing.Sign
//
//gradle.taskGraph.whenReady { taskGraph ->
//	if (taskGraph.allTasks.any { it instanceof Sign }) {
//		// Use Java 6's console to read from the console (no good for
//		// a CI environment)
//		Console console = System.console()
//		console.printf "\n\nWe have to sign some things in this build." +
//					   "\n\nPlease enter your signing details.\n\n"
//
//		def id = console.readLine("PGP Key Id: ")
//		def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
//		def password = console.readPassword("PGP Private Key Password: ")
//
//		allprojects { ext."signing.keyId" = id }
//		allprojects { ext."signing.secretKeyRingFile" = file }
//		allprojects { ext."signing.password" = password }
//
//		console.printf "\nThanks.\n\n"
//	}
//}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			authentication(userName: ossrhUsername, password: ossrhPassword)
		}

		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			authentication(userName: ossrhUsername, password: ossrhPassword)
		}


			pom.project {
				name 'NRJavaSerial'
				packaging 'jar'
				description 'A fork of the RXTX library with a focus on ease of use and embeddability in other libraries.'
				url 'http://neuronrobotics.com'

				scm {
					connection			'scm:git:https://github.com/NeuronRobotics/nrjavaserial.git'
					developerConnection	'scm:git:git@github.com:NeuronRobotics/nrjavaserial.git'
					url					'https://github.com/NeuronRobotics/nrjavaserial'
				}

				licenses {
					license {
						name	'The Apache License, Version 2.0'
						url		'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id		'madhephaestus'
						name	'Kevin Harrington'
						email	'kharrington@neuronrobotics.com'
					}
				}
			}
		}
	}
}
*/
